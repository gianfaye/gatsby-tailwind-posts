{"version":3,"file":"component---src-pages-index-tsx-660983fb2cfdbaaa7446.js","mappings":"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","sources":["webpack://gatsby-tailwind-posts/./src/components/AuthorFilter.tsx","webpack://gatsby-tailwind-posts/./src/components/PageSelector.tsx","webpack://gatsby-tailwind-posts/./src/components/PostsList.tsx","webpack://gatsby-tailwind-posts/./src/components/PostsSort.tsx","webpack://gatsby-tailwind-posts/./src/pages/index.tsx"],"sourcesContent":["import React, { Dispatch, SetStateAction } from \"react\";\nimport { ApiResponseObject } from \"../utils/types\";\n\ninterface AuthorFilterProps {\n  searchKeyword: string;\n  setSearchKeyword: Dispatch<SetStateAction<string>>;\n  filteredAuthors: ApiResponseObject[];\n  selectedAuthor: ApiResponseObject;\n  setSelectedAuthor: Dispatch<SetStateAction<ApiResponseObject>>;\n}\nconst AuthorFilter = ({\n  searchKeyword,\n  setSearchKeyword,\n  filteredAuthors,\n  selectedAuthor,\n  setSelectedAuthor,\n}: AuthorFilterProps) => {\n  const hasSelectedAuthor = Object.keys(selectedAuthor).length > 0;\n  const hasFilteredAuthors = filteredAuthors.length > 0;\n\n  const handleAuthorSelect = (author: ApiResponseObject) => {\n    setSelectedAuthor(author);\n    setSearchKeyword(author.name as string);\n  };\n  const handleResetFilter = () => {\n    setSelectedAuthor({});\n    setSearchKeyword(\"\");\n  };\n\n  return (\n    <div className=\"mx-auto max-w-2xl lg:mx-0 flex items-center space-x-4 mt-2\">\n      <div className=\"relative\">\n        <label htmlFor=\"filtering\">Author:</label>\n        <input\n          id=\"filtering\"\n          type=\"text\"\n          placeholder=\"Filter by author\"\n          value={searchKeyword}\n          onChange={(e) => setSearchKeyword(e.target.value)}\n          className=\"border rounded py-1 px-2 ml-5\"\n        />\n        {!hasSelectedAuthor && hasFilteredAuthors && (\n          <div className=\"absolute z-10 top-full left-10 w-half bg-white shadow-lg rounded-md ml-5\">\n            <ul className=\"py-2\">\n              {filteredAuthors.map((author) => (\n                <li\n                  key={author.id as string}\n                  onClick={() => handleAuthorSelect(author)}\n                  className=\"px-4 py-2 hover:bg-gray-100 cursor-pointer\"\n                >\n                  {author.name as string}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        <button\n          className=\"ml-3 bg-black text-white px-4 py-1 rounded\"\n          onClick={handleResetFilter}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthorFilter;\n","import React, { Dispatch, SetStateAction } from \"react\";\n\ninterface PageSelectorProps {\n  currentPage: number;\n  pageTotalCount: number;\n  setCurrentPage: Dispatch<SetStateAction<number>>;\n}\nconst PageSelector = ({\n  currentPage,\n  pageTotalCount,\n  setCurrentPage,\n}: PageSelectorProps) => {\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === pageTotalCount;\n\n  const handlePageChange = (action: string) => {\n    if (action === \"prev\") {\n      setCurrentPage(currentPage - 1);\n      return;\n    }\n    setCurrentPage(currentPage + 1);\n  };\n\n  return (\n    <div className=\"grid grid-cols-3 border-t border-gray-200 pt-10 mt-10\">\n      {!isFirstPage && (\n        <div className=\"col-start-1 col-end-2\">\n          <button\n            className=\"bg-black text-white float-left px-4 py-2 rounded\"\n            onClick={() => handlePageChange(\"prev\")}\n          >\n            Previous Page\n          </button>\n        </div>\n      )}\n      <div className=\"col-start-2 col-end-3\">\n        <div className=\"flex justify-center items-center h-full\">\n          <span>\n            Showing page {currentPage} of {pageTotalCount}\n          </span>\n        </div>\n      </div>\n      {!isLastPage && (\n        <div className=\"col-start-3 col-end-4 \">\n          <button\n            className=\"bg-black text-white float-right px-4 py-2 rounded\"\n            onClick={() => handlePageChange(\"next\")}\n          >\n            Next Page\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PageSelector;\n","import React from \"react\";\nimport { ApiResponseObject, IdToApiResponseObject } from \"../utils/types\";\n\ninterface PostsListProps {\n  posts: ApiResponseObject[];\n  usersById: IdToApiResponseObject;\n}\nconst PostsList = ({ posts, usersById }: PostsListProps) => {\n  return (\n    <>\n      {posts.map((post) => {\n        const { id, userId, title, body } = post;\n        const author = usersById[userId as number];\n        // console.log('author', author)\n        const authorName = (author?.name as string) ?? \"\";\n        return (\n          <article\n            key={id as string}\n            className=\"flex max-w-xl flex-col items-start justify-between\"\n          >\n            <div className=\"flex items-center gap-x-4 text-xs\"></div>\n            <div className=\"group relative\">\n              <h3 className=\"mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600 capitalize\">\n                <a href=\"#\">{title as string}</a>\n              </h3>\n              <div className=\"text-sm leading-6\">\n                <p className=\"font-semibold text-gray-900\">\n                  <a href=\"#\">\n                    <span className=\"absolute inset-0\" />\n                    {authorName}\n                  </a>\n                </p>\n              </div>\n              <p className=\"mt-5 text-sm leading-6 text-gray-600 line-clamp-3 sentence-case\">\n                {body as string}\n              </p>\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n};\n\nexport default PostsList;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { SortingOrder } from \"../utils/types\";\n\ninterface PostsSortProps {\n  sortingOrder: SortingOrder;\n  setSortingOrder: Dispatch<SetStateAction<SortingOrder>>;\n}\nconst PostsSort = ({ sortingOrder, setSortingOrder }: PostsSortProps) => {\n  const handlePostsSorting = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const sort = event.target.value as SortingOrder;\n    setSortingOrder(sort);\n  };\n  return (\n    <div className=\"mx-auto max-w-2xl lg:mx-0 flex items-center space-x-4 mt-2\">\n      <label htmlFor=\"sorting\">Sort by:</label>\n      <select\n        id=\"sorting\"\n        value={sortingOrder}\n        onChange={handlePostsSorting}\n        className=\"border rounded py-1 px-2\"\n      >\n        <option value=\"default\">Default</option>\n        <option value=\"az\">A-Z</option>\n        <option value=\"za\">Z-A</option>\n      </select>\n    </div>\n  );\n};\n\nexport default PostsSort;\n","import React, { useState, useEffect } from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport {\n  ApiResponseObject,\n  IdToApiResponseObject,\n  SortingOrder,\n} from \"../utils/types\";\nimport {\n  AuthorFilter,\n  PageSelector,\n  PostsList,\n  PostsSort,\n} from \"../components\";\n\nconst PAGE_TOTAL_COUNT = 2;\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [postsData, setPostsData] = useState<ApiResponseObject[]>([]);\n  const [usersData, setUsersData] = useState<ApiResponseObject[]>([]);\n  const [usersByIdData, setUsersByIdData] = useState<IdToApiResponseObject>(\n    {} as IdToApiResponseObject\n  );\n  const [sortedPostsData, setSortedPostsData] = useState<ApiResponseObject[]>(\n    []\n  );\n  const [sortingOrder, setSortingOrder] = useState<SortingOrder>(\"default\");\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [postsPerPage, setPostsPerPage] = useState<ApiResponseObject[]>([]);\n  const [selectedAuthor, setSelectedAuthor] = useState<ApiResponseObject>({});\n  const [filteredAuthors, setFilteredAuthors] = useState<ApiResponseObject[]>(\n    []\n  );\n  const [filteredPosts, setFilteredPosts] = useState<ApiResponseObject[]>([]);\n  const [searchKeyword, setSearchKeyword] = useState<string>(\"\");\n\n  const getPostsData = async () => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n    const jsonResponse = await response.json();\n    setPostsData(jsonResponse);\n  };\n\n  const getUsersData = async () => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const jsonResponse = await response.json();\n    const usersList = [...jsonResponse] as ApiResponseObject[];\n    const usersById = usersList?.reduce((accumulator, user) => {\n      const userId = user?.id as number;\n      accumulator[userId] = user;\n      return accumulator;\n    }, {} as IdToApiResponseObject);\n    setUsersData(jsonResponse);\n    setUsersByIdData(usersById);\n  };\n\n  useEffect(() => {\n    getPostsData();\n    getUsersData();\n  }, []);\n\n  useEffect(() => {\n    const hasSelectedAuthor = Object.keys(selectedAuthor).length > 0;\n    if (!hasSelectedAuthor) {\n      setFilteredPosts(postsData);\n      return;\n    }\n    const postsByAuthor = postsData.filter((post) => {\n      const postAuthorId = post.userId as number;\n      const selectedAuthorId = selectedAuthor?.id as number;\n      return postAuthorId === selectedAuthorId;\n    });\n    setFilteredPosts(postsByAuthor);\n  }, [selectedAuthor, postsData]);\n\n  useEffect(() => {\n    const sortedPosts = [...filteredPosts].sort(\n      (a: ApiResponseObject, b: ApiResponseObject) => {\n        if (sortingOrder === \"az\")\n          return a.title < b.title ? -1 : a.title > b.title ? 1 : 0;\n        if (sortingOrder === \"za\")\n          return a.title > b.title ? -1 : a.title < b.title ? 1 : 0;\n        return 0;\n      }\n    );\n    setSortedPostsData(sortedPosts);\n  }, [filteredPosts, sortingOrder]);\n\n  useEffect(() => {\n    const postsTotalCount = sortedPostsData.length;\n    if (postsTotalCount <= 0) return;\n    const postsToShow = postsTotalCount / PAGE_TOTAL_COUNT;\n    const endIndex = currentPage * postsToShow;\n    const startIndex = endIndex - postsToShow;\n    const currentPosts = sortedPostsData.slice(startIndex, endIndex);\n    setPostsPerPage(currentPosts);\n  }, [sortedPostsData, currentPage]);\n\n  useEffect(() => {\n    if (searchKeyword.length > 0) {\n      const filtered = usersData.filter((user) =>\n        (user.name as string)\n          .toLowerCase()\n          .includes(searchKeyword.toLowerCase())\n      );\n      setFilteredAuthors(filtered);\n    } else {\n      setFilteredAuthors([]);\n      setSelectedAuthor({});\n    }\n  }, [searchKeyword, usersData]);\n\n  return (\n    <main>\n      <div className=\"bg-white py-24 sm:py-32\">\n        <div className=\"mx-auto max-w-7xl px-6 lg:px-8\">\n          <div>\n            <div className=\"mx-auto max-w-2xl lg:mx-0\">\n              <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n                Posts\n              </h2>\n              <p className=\"mt-2 text-lg leading-8 text-gray-600\">\n                Here are the sample posts from the JSON placeholder API\n              </p>\n            </div>\n\n            <PostsSort\n              sortingOrder={sortingOrder}\n              setSortingOrder={setSortingOrder}\n            />\n\n            <AuthorFilter\n              searchKeyword={searchKeyword}\n              setSearchKeyword={setSearchKeyword}\n              filteredAuthors={filteredAuthors}\n              selectedAuthor={selectedAuthor}\n              setSelectedAuthor={setSelectedAuthor}\n            />\n          </div>\n\n          <PageSelector\n            currentPage={currentPage}\n            pageTotalCount={PAGE_TOTAL_COUNT}\n            setCurrentPage={setCurrentPage}\n          />\n\n          <div className=\"mx-auto mt-10 grid max-w-2xl grid-cols-1 gap-y-16 gap-x-8 sm:mt-16 sm:pt-8 lg:mx-0 lg:max-w-none lg:grid-cols-3\">\n            <PostsList posts={postsPerPage} usersById={usersByIdData} />\n          </div>\n\n          <PageSelector\n            currentPage={currentPage}\n            pageTotalCount={PAGE_TOTAL_COUNT}\n            setCurrentPage={setCurrentPage}\n          />\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Posts</title>;\n"],"names":["_ref","searchKeyword","setSearchKeyword","filteredAuthors","selectedAuthor","setSelectedAuthor","hasSelectedAuthor","Object","keys","length","hasFilteredAuthors","React","className","htmlFor","id","type","placeholder","value","onChange","e","target","map","author","key","onClick","name","handleAuthorSelect","currentPage","pageTotalCount","setCurrentPage","isFirstPage","isLastPage","handlePageChange","action","posts","usersById","post","userId","title","body","authorName","href","sortingOrder","setSortingOrder","event","sort","postsData","setPostsData","useState","usersData","setUsersData","usersByIdData","setUsersByIdData","sortedPostsData","setSortedPostsData","postsPerPage","setPostsPerPage","setFilteredAuthors","filteredPosts","setFilteredPosts","useEffect","async","response","fetch","jsonResponse","json","getPostsData","usersList","reduce","accumulator","user","getUsersData","postsByAuthor","filter","sortedPosts","_toConsumableArray","a","b","postsTotalCount","postsToShow","endIndex","startIndex","currentPosts","slice","filtered","toLowerCase","includes","PostsSort","AuthorFilter","PageSelector","PostsList","Head"],"sourceRoot":""}